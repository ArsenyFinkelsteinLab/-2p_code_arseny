function PLOT_SVD_Variance_and_SpatialScale()
dir_base = fetch1(IMG.Parameters & 'parameter_name="dir_root_save"', 'parameter_value');
dir_current_fig = [dir_base  '\POP\SVD\'];
filename = 'SVD_variance_and_spatial_scale';
close all

rel_data1 = POP.ROISVDDistanceScale  & (IMG.Mesoscope & IMG.Volumetric);
rel_data2 = POP.SVDSingularValues  & (IMG.Mesoscope & IMG.Volumetric) & 'threshold_for_event=0' & 'time_bin=1.5';
rel_data3 = POP.SVDTemporalComponentsAutocorr	 & (IMG.Mesoscope & IMG.Volumetric);

smooth_window_scale = 3;

DefaultFontSize =16;
% figure
set(gcf,'DefaultAxesFontName','helvetica');
set(gcf,'PaperUnits','centimeters','PaperPosition',[0 0 23 30]);
set(gcf,'PaperOrientation','portrait');
set(gcf,'Units','centimeters','Position',get(gcf,'paperPosition')+[3 0 0 0]);
set(gcf,'color',[1 1 1]);



horizontal_dist=0.35;
vertical_dist=0.35;

panel_width1=0.2;
panel_height1=0.2;
position_x1(1)=0.2;
position_x1(end+1)=position_x1(end)+horizontal_dist;

position_y1(1)=0.5;
position_y1(end+1)=position_y1(end)-vertical_dist;



%% Variance
%--------------------------------------------------------------

% Variance behavior
%---------------
DATA=fetch(rel_data2 & 'session_epoch_type="behav_only"','*');
num_sessions = numel(DATA);

for i=1:1:num_sessions
    num_components_behav(i) = numel(DATA(i).singular_values);
end
num_components_behav = min(num_components_behav);

for i=1:1:num_sessions
    v = DATA(i).singular_values;
    ve =v.^2/sum(v.^2); % a feature of SVD. proportion of variance explained by each component
    VE_behav (i,:) = ve(1:1:num_components_behav);
end
VE_behav_mean =  mean(VE_behav,1);
VE_behav_stem =  std(VE_behav,1)./sqrt(num_sessions);



% Variance Spont
%---------------
DATA=fetch(rel_data2 & 'session_epoch_type="spont_only"' ,'*');
num_sessions = numel(DATA);
for i=1:1:num_sessions
    num_components_spont(i) = numel(DATA(i).singular_values);
end
num_components_spont = min(num_components_spont);

for i=1:1:num_sessions
    v = DATA(i).singular_values;
    ve =v.^2/sum(v.^2); % a feature of SVD. proportion of variance explained by each component
    VE_spont (i,:) = ve(1:1:num_components_spont);
end
VE_spont_mean =  mean(VE_spont,1);
VE_spont_stem =  std(VE_spont,1)./sqrt(num_sessions);
    
%     cumulative_variance_explained=cumsum(variance_explained);
    %             plot(cumulative_variance_explained);
    %             xlabel('Component')
    %             ylabel('Cumulative explained variance');


% Variance plot
%---------------
x_behav = 1:1:num_components_behav;
err_behav = [VE_behav_mean+VE_behav_stem; VE_behav_mean - VE_behav_stem];                                                       
x_spont= 1:1:num_components_spont;
err_spont = [VE_spont_mean+VE_spont_stem; VE_spont_mean - VE_spont_stem];                                                     

subplot(2,2,1)
hold on
patch([x_behav, fliplr(x_behav)], [err_behav(1,:), fliplr(err_behav(2,:))], 'b', 'FaceAlpha',0.2, 'EdgeColor', 'none')   % Shaded Confidence Intervals
plot(x_behav, VE_behav_mean,'-b')

patch([x_spont, fliplr(x_spont)], [err_spont(1,:), fliplr(err_spont(2,:))], 'r', 'FaceAlpha',0.2, 'EdgeColor', 'none')   % Shaded Confidence Intervals
plot(x_spont, VE_spont_mean,'-r')
set(gca, 'XScale','log', 'YScale','log')
xlabel('PC dimension');
ylabel('Variance');
text(1.5, 0.001 ,'Behavior', 'Color', [0 0 1]);
text(1.5,0.0005,'Spontaneous', 'Color', [1 0 0]);
box off
xlim([1 1000])
ylim([0.0001 0.15])
set(gca,'XTick', [1,10,100,1000], 'Ytick', [0.0001 0.001 0.01 0.1])


%% Spatial Scale
%------------------------------

% Spatial scale Behavior
%--------------
DATA=fetch(rel_data1 & 'session_epoch_type="behav_only"','*');
num_sessions = numel(DATA);
num_components_behav = min([DATA.num_components]);
for i=1:1:num_sessions
    Scale_behav (i,:) = smooth(DATA(i).distance_tau(1:1:num_components_behav),smooth_window_scale);
end

Scale_behav_mean =  mean(Scale_behav,1);
Scale_behav_stem =  std(Scale_behav,1)./sqrt(num_sessions);


% Spatial scale Spont
%---------------
DATA=fetch(rel_data1 & 'session_epoch_type="spont_only"' ,'*');
num_sessions = numel(DATA);
num_components_spont = min([DATA.num_components]);
for i=1:1:num_sessions
    Scale_spont (i,:) = smooth(DATA(i).distance_tau(1:1:num_components_spont),smooth_window_scale);
end

Scale_spont_mean =  mean(Scale_spont,1);
Scale_spont_stem =  std(Scale_spont,1)./sqrt(num_sessions);

% Spatial scale plot
%---------------
x_behav = 1:1:num_components_behav;
y_behav = Scale_behav_mean;
err_behav = [Scale_behav_mean+Scale_behav_stem; Scale_behav_mean - Scale_behav_stem];     

x_spont= 1:1:num_components_spont;
y_spont = Scale_spont_mean;
err_spont = [Scale_spont_mean+Scale_spont_stem; Scale_spont_mean - Scale_spont_stem];                                                     

subplot(2,2,2)
hold on
patch([x_behav, fliplr(x_behav)], [err_behav(1,:), fliplr(err_behav(2,:))], 'b', 'FaceAlpha',0.5, 'EdgeColor', 'none')   % Shaded Confidence Intervals
plot(x_behav, y_behav,'-b')
patch([x_spont, fliplr(x_spont)], [err_spont(1,:), fliplr(err_spont(2,:))], 'r', 'FaceAlpha',0.5, 'EdgeColor', 'none')   % Shaded Confidence Intervals
plot(x_spont, y_spont,'-r')
set(gca, 'XScale','log', 'YScale','log')
xlabel('PC dimension');
ylabel('Spatial scale (\mum)');
box off
text(1.5,400,'Behavior', 'Color', [0 0 1]);
text(1.5,330,'Spontaneous', 'Color', [1 0 0]);
xlim([1 1000])
% set(gca,'XTick', [1,10,100,1000], 'Ytick', [125 250 500 1000 2000])
set(gca,'XTick', [1,10,100,1000], 'Ytick', [250 500 1000 2000])
ylim([200 2000])

fig = gcf;    %or one particular figure whose handle you already know, or 0 to affect all figures
set( findall(fig, '-property', 'fontsize'), 'fontsize', DefaultFontSize)


%% Autocorrelation timescale of the PCs 
%------------------------------

% Timescales Behavior
%--------------
DATA=fetch(rel_data3 & 'session_epoch_type="behav_only"','*');
num_sessions = numel(DATA);
num_components_behav = min([DATA.num_components]);
Scale_behav=[];
for i=1:1:num_sessions
    Scale_behav (i,:) = smooth(DATA(i).temporal_component_autocorr_tau(1:1:num_components_behav),smooth_window_scale);
end

Scale_behav_mean =  mean(Scale_behav,1);
Scale_behav_stem =  std(Scale_behav,1)./sqrt(num_sessions);


%Timescales Spont
%---------------
DATA=fetch(rel_data3 & 'session_epoch_type="spont_only"' ,'*');
num_sessions = numel(DATA);
num_components_spont = min([DATA.num_components]);
Scale_spont=[];
for i=1:1:num_sessions
    Scale_spont (i,:) = smooth(DATA(i).temporal_component_autocorr_tau(1:1:num_components_spont),smooth_window_scale);
end

Scale_spont_mean =  mean(Scale_spont,1);
Scale_spont_stem =  std(Scale_spont,1)./sqrt(num_sessions);

% Spatial scale plot
%---------------
x_behav = 1:1:num_components_behav;
y_behav = Scale_behav_mean;
err_behav = [Scale_behav_mean+Scale_behav_stem; Scale_behav_mean - Scale_behav_stem];     

x_spont= 1:1:num_components_spont;
y_spont = Scale_spont_mean;
err_spont = [Scale_spont_mean+Scale_spont_stem; Scale_spont_mean - Scale_spont_stem];                                                     

subplot(2,2,3)
hold on
patch([x_behav, fliplr(x_behav)], [err_behav(1,:), fliplr(err_behav(2,:))], 'b', 'FaceAlpha',0.5, 'EdgeColor', 'none')   % Shaded Confidence Intervals
plot(x_behav, y_behav,'-b')
patch([x_spont, fliplr(x_spont)], [err_spont(1,:), fliplr(err_spont(2,:))], 'r', 'FaceAlpha',0.5, 'EdgeColor', 'none')   % Shaded Confidence Intervals
plot(x_spont, y_spont,'-r')
set(gca, 'XScale','log', 'YScale','log')
xlabel('PC dimension');
ylabel('Temporal scale (\mum)');
box off
text(1.5,400,'Behavior', 'Color', [0 0 1]);
text(1.5,330,'Spontaneous', 'Color', [1 0 0]);
xlim([1 100])
% set(gca,'XTick', [1,10,100,1000], 'Ytick', [125 250 500 1000 2000])
% set(gca,'XTick', [1,10,100,1000], 'Ytick', [250 500 1000 2000])
% ylim([200 2000])
set(gca,'XTick', [1,10,100,1000])

fig = gcf;    %or one particular figure whose handle you already know, or 0 to affect all figures
set( findall(fig, '-property', 'fontsize'), 'fontsize', DefaultFontSize)



if isempty(dir(dir_current_fig))
    mkdir (dir_current_fig)
end
%
figure_name_out=[ dir_current_fig filename];
eval(['print ', figure_name_out, ' -dtiff  -r200']);
% eval(['print ', figure_name_out, ' -dpdf -r200']);
